"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[19],{8325:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-002b495e",path:"/writeup/2021dfjk-writeup.html",title:"2021巅峰极客",lang:"zh-CN",frontmatter:{title:"2021巅峰极客",date:"2021-08-02T17:58:00.000Z",tags:["CTF"]},excerpt:"",headers:[{level:2,title:"Misc",slug:"misc",children:[]},{level:2,title:"Re",slug:"re",children:[]},{level:2,title:"Crypto",slug:"crypto",children:[]}],filePathRelative:"writeup/2021dfjk-writeup.md",git:{}}},6559:(n,s,a)=>{a.r(s),a.d(s,{default:()=>M});var p=a(6252);const t={class:"table-of-contents"},e=(0,p.Uk)("Misc"),o=(0,p.Uk)("Re"),c=(0,p.Uk)("Crypto"),l=(0,p.uE)('<h1 id="_2021年巅峰极客网络安全技能挑战赛部分题目writeup及赛后复现" tabindex="-1"><a class="header-anchor" href="#_2021年巅峰极客网络安全技能挑战赛部分题目writeup及赛后复现" aria-hidden="true">#</a> 2021年巅峰极客网络安全技能挑战赛部分题目writeup及赛后复现</h1><p>这次比赛时就做出<code>签到</code>和<code>baby_maze</code>两道题，排名为93名。赛后10分钟做出<code>MedicalImage</code>，看了一下排名，要是能赛时交上这道就恰好和清华一支队伍平分，而那个分数又只有他一支队伍<s>也就是说差点就可以玩梗清华以下就是南科了哭哭</s>。</p><h2 id="misc" tabindex="-1"><a class="header-anchor" href="#misc" aria-hidden="true">#</a> Misc</h2><h4 id="签到" tabindex="-1"><a class="header-anchor" href="#签到" aria-hidden="true">#</a> 签到</h4><p>emoji-aes解密即可。</p>',5),u=(0,p.Uk)('给了一串emoji和一个提示字符串"GAME"，因为之前了解有emoji-aes加密所以马上想到了它。用'),r={href:"https://aghorler.github.io/emoji-aes/",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("在线工具"),k=(0,p.Uk)("解密，密钥即"),b=(0,p._)("code",null,"GAME",-1),m=(0,p.Uk)("，拿到flag。"),d=(0,p.uE)('<h2 id="re" tabindex="-1"><a class="header-anchor" href="#re" aria-hidden="true">#</a> Re</h2><h4 id="baby-maze" tabindex="-1"><a class="header-anchor" href="#baby-maze" aria-hidden="true">#</a> baby_maze</h4><p>写搜索算法跑出到迷宫终点的路径即可。</p><p>拿到elf可执行文件。先拖进ida无脑F5看看，直接看比较懵，随便跑一下，大概明白程序是玩家在一个迷宫中，整个迷宫地图对于玩家是不可见的，玩家通过键盘输入决定移动方向(WSAD)，根据玩家当前所在的位置和选择的方向，程序返回相应的输出信息，如果这个方向能走，玩家就移动到新的位置。</p><p>下面是一些输出信息，输入的方向信息没有回显。</p><p><img src="2021dfjk-writeup.assets/image-20210801183003656.png" alt="一些输出信息，输入的方向信息没有回显。"></p><p>回到ida调出字符串窗口，里面给出了所有的可能输出的字符串（除了一个<code>Wuhu</code>，详见脚本注释），包括到达终点后的输出，告诉我们flag是我们走到终点的最短路线（按下的按键）字符串的md5值。</p><p><img src="2021dfjk-writeup.assets/image-20210801183259514.png" alt="string窗口节选"></p><p>要得到走到终点的路线可以写个DFS算法。脚本如下</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>\n<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5\n\nyes_strs <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token comment"># &#39;This is the beginning. You can only go south.&#39;,</span>\n    <span class="token string">b&#39;Just do it&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;GOGOGO&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Wuhu&#39;</span><span class="token punctuation">,</span> <span class="token comment"># ida调出来是没有找到这个字符串的，跑脚本的过程中发现有这个输出，就加上了</span>\n    <span class="token string">b&#39;Wuhu~!&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;You are so good&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Nice.&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Yeah~~~&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Let\\&#39;s go.&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Never stop&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;So smart&#39;</span>\n<span class="token punctuation">]</span>\n\nno_strs <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token string">b&#39;Oh!!Monster&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Uh... yeah, no.&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;nononononono&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Let me out!!!&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;I can\\&#39;t see the sky&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Fxxk!!!&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Maybe this is a mistack&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Shit!!&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Oh no!!!&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;Wall!!!&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">b&#39;OUCH!!!!&#39;</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment"># final_str = b&#39;Good Job. \\nAnd the flag is flag md5If not, you may need to go faster!&#39;</span>\nfinal_str <span class="token operator">=</span> <span class="token string">b&#39;Good Job.&#39;</span>\n\nSCALE <span class="token operator">=</span> <span class="token number">500</span>\n\nSTART <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>\nOK <span class="token operator">=</span> <span class="token number">0</span>\nWALKED <span class="token operator">=</span> <span class="token number">1</span>\nWALL <span class="token operator">=</span> <span class="token number">2</span>\nmark <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span> <span class="token punctuation">(</span>SCALE<span class="token punctuation">,</span> SCALE<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> <span class="token builtin">int</span> <span class="token punctuation">)</span>\n\ncontext<span class="token punctuation">.</span>binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">&#39;./maze&#39;</span><span class="token punctuation">)</span>\n\nio <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">DFS</span><span class="token punctuation">(</span>move<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> routine<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    <span class="token keyword">global</span> io\n    \n    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>move<span class="token punctuation">)</span>\n\n    message <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> message <span class="token keyword">in</span> yes_strs<span class="token punctuation">:</span> <span class="token comment"># 这个位置不是墙（可以走）</span>\n\n        mark<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> WALKED  <span class="token comment"># 标记为已走过</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> routine<span class="token punctuation">,</span> message<span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> mark<span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> OK<span class="token punctuation">:</span> <span class="token comment"># north</span>\n            \n            next_move <span class="token operator">=</span> <span class="token string">&#39;W&#39;</span>\n            next_pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            next_routine <span class="token operator">=</span> routine <span class="token operator">+</span> next_move\n            DFS<span class="token punctuation">(</span>next_move<span class="token punctuation">,</span> next_pos<span class="token punctuation">,</span> next_routine<span class="token punctuation">)</span> <span class="token comment"># 下一层DFS</span>\n            <span class="token keyword">if</span> mark<span class="token punctuation">[</span>next_pos<span class="token punctuation">]</span> <span class="token operator">!=</span> WALL<span class="token punctuation">:</span> <span class="token comment"># 如果下一个位置不是墙（可以走），DFS回溯到这里时要往回走一步</span>\n                io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span>\n                io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        \n        <span class="token keyword">if</span> mark<span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> OK<span class="token punctuation">:</span> <span class="token comment"># east</span>\n            \n            next_move <span class="token operator">=</span> <span class="token string">&#39;D&#39;</span>\n            next_pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n            next_routine <span class="token operator">=</span> routine <span class="token operator">+</span> next_move\n            DFS<span class="token punctuation">(</span>next_move<span class="token punctuation">,</span> next_pos<span class="token punctuation">,</span> next_routine<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> mark<span class="token punctuation">[</span>next_pos<span class="token punctuation">]</span> <span class="token operator">!=</span> WALL<span class="token punctuation">:</span>\n                io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>\n                io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> mark<span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> OK<span class="token punctuation">:</span> <span class="token comment"># south</span>\n            \n            next_move <span class="token operator">=</span> <span class="token string">&#39;S&#39;</span>\n            next_pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            next_routine <span class="token operator">=</span> routine <span class="token operator">+</span> next_move\n            DFS<span class="token punctuation">(</span>next_move<span class="token punctuation">,</span> next_pos<span class="token punctuation">,</span> next_routine<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> mark<span class="token punctuation">[</span>next_pos<span class="token punctuation">]</span> <span class="token operator">!=</span> WALL<span class="token punctuation">:</span>\n                io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">&#39;W&#39;</span><span class="token punctuation">)</span>\n                io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> mark<span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> OK<span class="token punctuation">:</span> <span class="token comment"># west</span>\n            \n            next_move <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span>\n            next_pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n            next_routine <span class="token operator">=</span> routine <span class="token operator">+</span> next_move\n            DFS<span class="token punctuation">(</span>next_move<span class="token punctuation">,</span> next_pos<span class="token punctuation">,</span> next_routine<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> mark<span class="token punctuation">[</span>next_pos<span class="token punctuation">]</span> <span class="token operator">!=</span> WALL<span class="token punctuation">:</span>\n                io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>\n                io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">elif</span> message <span class="token keyword">in</span> no_strs<span class="token punctuation">:</span>\n        \n        mark<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> WALL\n        <span class="token keyword">return</span>\n\n    <span class="token keyword">elif</span> message <span class="token operator">==</span> final_str<span class="token punctuation">:</span>\n        \n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Find the flag routine:&#39;</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;routine: </span><span class="token interpolation"><span class="token punctuation">{</span>routine<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;flag: </span><span class="token interpolation"><span class="token punctuation">{</span>md5<span class="token punctuation">(</span>routine<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;ascii&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>\n        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        \n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;unhold message: </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;cur routine: </span><span class="token interpolation"><span class="token punctuation">{</span>routine<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>\n        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\nio<span class="token punctuation">.</span>recvline_contains<span class="token punctuation">(</span><span class="token string">&#39;This is the beginning. You can only go south.&#39;</span><span class="token punctuation">)</span>\n\nbase_pos <span class="token operator">=</span> <span class="token punctuation">(</span>SCALE <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> SCALE <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\nmark<span class="token punctuation">[</span>base_pos<span class="token punctuation">]</span> <span class="token operator">=</span> START\nDFS<span class="token punctuation">(</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>base_pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> base_pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span> <span class="token comment"># DFS开始</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br></div></div><p>其实我这里写的算法理论上跑出来的路径不一定是最短的，可能是地图设计的比较简单，我跑出来的恰好是对的。脚本输出如下，md5值包裹上flag格式即为正确flag。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Find the flag routine:\nroutine: SSSSSSSSSDDDDDDWWWWAAWWAAWWDDDDDDDDDDDDDDDDDDDDSSDDSSAASSSSAAAAWWAAWWWWAASSSSSSAASSDDSSSSDDWWWWDDSSDDDDWWDDDDDDWWAAAAWWDDDDWWAAWWWWDDSSDDSSSSSSSSSSDDDDSSAAAASSSSSSAASSSSAAWWAASSSSDDDDDDDDDDSSDDSSAASSSSAASSSSSSSSDDWWWWWWDDWWWWDDWWWWDDSSSSSSSSAASSSSDDDDSSDDDDWWDDSSDDSSDDDDDDDDSSDDSSSSDDDDSSDDSSSSSSDDSSSSDDDDSSSSDDDDDDSSSSDDSSDSSASSSSAASSDDSSAASSDDDDDDSSDDDDWWDDSSSSSSDDDDWWAAWWWWDDDDSSSSDDDDDDSSAASSSSSSDDDDDDDDSSDDDDSSSSSSDDWWDDDDDDSSSSSSSSAASSDDSSSSSSAASSDDS\nflag: 078c8fbc1d0d033f663dcc58e899c101\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="medical-app" tabindex="-1"><a class="header-anchor" href="#medical-app" aria-hidden="true">#</a> medical_app</h4><p>推rc4的时候出了点问题，先占了坑，把思路理顺了再写。</p><h2 id="crypto" tabindex="-1"><a class="header-anchor" href="#crypto" aria-hidden="true">#</a> Crypto</h2><h4 id="medicalimage" tabindex="-1"><a class="header-anchor" href="#medicalimage" aria-hidden="true">#</a> MedicalImage</h4><p>根据提示还原加密算法，写出解密算法解密图片即可。</p><p>给了不完整的脚本文件和加密后的图片，脚本内容如下</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image\n<span class="token keyword">from</span> decimal <span class="token keyword">import</span> <span class="token operator">*</span>\n<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n<span class="token keyword">import</span> random\ngetcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token number">20</span>\n\n<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># It is based on logistic map in chaotic systems</span>\n    <span class="token comment"># The parameter r takes the largest legal value</span>\n    <span class="token keyword">assert</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">assert</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># same as f1</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># same as f1</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n<span class="token keyword">def</span> <span class="token function">encryptImage</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>\n    size <span class="token operator">=</span> im<span class="token punctuation">.</span>size\n    pic  <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>im<span class="token punctuation">)</span> \n    im<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    r1 <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.478706063089473894123&#39;</span><span class="token punctuation">)</span>\n    r2 <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.613494245341234672318&#39;</span><span class="token punctuation">)</span>\n    r3 <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.946365754637812381837&#39;</span><span class="token punctuation">)</span>\n    w<span class="token punctuation">,</span>h <span class="token operator">=</span> size\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        r1 <span class="token operator">=</span> f1<span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n        r2 <span class="token operator">=</span> f2<span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n        r3 <span class="token operator">=</span> f3<span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n    const <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">14</span>\n    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            x1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>const<span class="token operator">*</span>r1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>w\n            y1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>const<span class="token operator">*</span>r2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>h\n            r1 <span class="token operator">=</span> f1<span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n            r2 <span class="token operator">=</span> f2<span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n            tmp <span class="token operator">=</span> pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span>\n            pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> pic<span class="token punctuation">[</span>y1<span class="token punctuation">,</span>x1<span class="token punctuation">]</span>\n            pic<span class="token punctuation">[</span>y1<span class="token punctuation">,</span>x1<span class="token punctuation">]</span> <span class="token operator">=</span> tmp\n    p0 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">)</span>\n    c0 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">204</span><span class="token punctuation">)</span>\n    config <span class="token operator">=</span> <span class="token punctuation">(</span>p0<span class="token punctuation">,</span>c0<span class="token punctuation">)</span>\n    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>const<span class="token operator">*</span>r3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span>\n            k <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>\n            k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>p0<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token punctuation">:</span>p0<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\n            r3 <span class="token operator">=</span> f3<span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n            p0 <span class="token operator">=</span> pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span>\n            c0 <span class="token operator">=</span> k<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">+</span>p0<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token operator">^</span>c0\n            pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> c0\n\n    <span class="token keyword">return</span> pic<span class="token punctuation">,</span>size<span class="token punctuation">,</span>config\n<span class="token keyword">def</span> <span class="token function">outputImage</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>pic<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">&#39;P&#39;</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span><span class="token string">&#39;white&#39;</span><span class="token punctuation">)</span>\n    pixels <span class="token operator">=</span> im<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            pixels<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>pic<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span>\n\n\n<span class="token keyword">def</span> <span class="token function">decryptImage</span><span class="token punctuation">(</span>pic<span class="token punctuation">,</span>size<span class="token punctuation">,</span>config<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    \nenc_img <span class="token operator">=</span> <span class="token string">&#39;flag.bmp&#39;</span>\nout_im <span class="token operator">=</span> <span class="token string">&#39;flag_enc.bmp&#39;</span>\n\npic<span class="token punctuation">,</span>size<span class="token punctuation">,</span>_ <span class="token operator">=</span> encryptImage<span class="token punctuation">(</span>enc_img<span class="token punctuation">)</span>\noutputImage<span class="token punctuation">(</span>out_im<span class="token punctuation">,</span>pic<span class="token punctuation">,</span>size<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div>',19),g=(0,p.Uk)("残缺的部分有作用相同的"),S=(0,p._)("code",null,"f1",-1),D=(0,p.Uk)("、"),y=(0,p._)("code",null,"f2",-1),f=(0,p.Uk)("、"),w=(0,p._)("code",null,"f3",-1),h=(0,p.Uk)("方法和解密方法，也就是还原了"),x=(0,p._)("code",null,"f1",-1),_=(0,p.Uk)('方法就能还原整个加密过程。直接google搜"logistic map in chaotic systems"，从'),W={href:"https://en.wikipedia.org/wiki/Logistic_map",target:"_blank",rel:"noopener noreferrer"},A=(0,p.Uk)("wikipedia词条"),v=(0,p.Uk)("得到公式$x_{n+1}=r"),z=(0,p._)("em",null,"x_n",-1),L=(0,p.Uk)("(1-x_n)$，其中$x_n, x_{n+1} \\in [0,1]$。为了保证x的取值范围，r的最大值取4（用基本不等式可以推出），修复"),U=(0,p._)("code",null,"f1",-1),I=(0,p.Uk)("等3个方法如下"),F=(0,p.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">assert</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">assert</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">*</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> x<span class="token punctuation">)</span>\n    \n<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> f1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> f1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>接下来详细分析加密过程</p><p>首先是初始化一些参数</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>\nsize <span class="token operator">=</span> im<span class="token punctuation">.</span>size\npic  <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>im<span class="token punctuation">)</span> \nim<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\nr1 <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.478706063089473894123&#39;</span><span class="token punctuation">)</span>\nr2 <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.613494245341234672318&#39;</span><span class="token punctuation">)</span>\nr3 <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.946365754637812381837&#39;</span><span class="token punctuation">)</span>\nw<span class="token punctuation">,</span>h <span class="token operator">=</span> size\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    r1 <span class="token operator">=</span> f1<span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n    r2 <span class="token operator">=</span> f2<span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n    r3 <span class="token operator">=</span> f3<span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n    const <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">14</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>接着，依次遍历每个像素点，将当前遍历到的像素点与一个算出来的像素点互换。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        x1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>const<span class="token operator">*</span>r1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>w\n        y1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>const<span class="token operator">*</span>r2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>h\n        r1 <span class="token operator">=</span> f1<span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n        r2 <span class="token operator">=</span> f2<span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n        tmp <span class="token operator">=</span> pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span>\n        pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> pic<span class="token punctuation">[</span>y1<span class="token punctuation">,</span>x1<span class="token punctuation">]</span>\n        pic<span class="token punctuation">[</span>y1<span class="token punctuation">,</span>x1<span class="token punctuation">]</span> <span class="token operator">=</span> tmp\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后，生成了一组随机数<code>p0</code>和<code>c0</code>，总共只有5*5=25种可能性，可以爆破。依次遍历每个像素点，对当前像素点的灰度值做一个变换，<code>p0</code>和<code>c0</code>作为变换的初始参数。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>p0 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">)</span>\nc0 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">204</span><span class="token punctuation">)</span>\nconfig <span class="token operator">=</span> <span class="token punctuation">(</span>p0<span class="token punctuation">,</span>c0<span class="token punctuation">)</span>\n<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>const<span class="token operator">*</span>r3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span>\n        k <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>\n        k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>p0<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token punctuation">:</span>p0<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\n        r3 <span class="token operator">=</span> f3<span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n        p0 <span class="token operator">=</span> pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span>\n        c0 <span class="token operator">=</span> k<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">+</span>p0<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token operator">^</span>c0\n        pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> c0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>照着每一步写出对应的逆变换即可。其中像素点互换部分，由于加密时先前的（互换）操作会影响到之后的（互换）操作，逆变换时需要以相反的顺序遍历；而灰度值变换部分则需要按照与加密时相同的顺序遍历。脚本如下</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">decryptImage</span><span class="token punctuation">(</span>pic<span class="token punctuation">,</span>size<span class="token punctuation">,</span>config<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    \n    r1 <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.478706063089473894123&#39;</span><span class="token punctuation">)</span>\n    r2 <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.613494245341234672318&#39;</span><span class="token punctuation">)</span>\n    r3 <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.946365754637812381837&#39;</span><span class="token punctuation">)</span>\n    w<span class="token punctuation">,</span> h <span class="token operator">=</span> size\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span> \n        r1 <span class="token operator">=</span> f1<span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n        r2 <span class="token operator">=</span> f2<span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n        r3 <span class="token operator">=</span> f3<span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n    const <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">14</span>\n\n    p0 <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    c0 <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n    \n    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>const<span class="token operator">*</span>r3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span>\n            k <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>\n            k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>p0<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token punctuation">:</span>p0<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\n            r3 <span class="token operator">=</span> f3<span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n            c1 <span class="token operator">=</span> pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span>\n            p0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c1<span class="token operator">^</span>c0<span class="token operator">^</span>k<span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span> \n            pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> p0\n            c0 <span class="token operator">=</span> c1\n\n    r1_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    r2_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            r1_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n            r2_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n            r1 <span class="token operator">=</span> f1<span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n            r2 <span class="token operator">=</span> f2<span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            x1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>const<span class="token operator">*</span>r1_list<span class="token punctuation">[</span>x <span class="token operator">*</span> h <span class="token operator">+</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>w\n            y1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>const<span class="token operator">*</span>r2_list<span class="token punctuation">[</span>x <span class="token operator">*</span> h <span class="token operator">+</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>h\n            \n            tmp <span class="token operator">=</span> pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span>\n            pic<span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> pic<span class="token punctuation">[</span>y1<span class="token punctuation">,</span>x1<span class="token punctuation">]</span>\n            pic<span class="token punctuation">[</span>y1<span class="token punctuation">,</span>x1<span class="token punctuation">]</span> <span class="token operator">=</span> tmp\n\n    <span class="token keyword">return</span> pic<span class="token punctuation">,</span> size\n\n\nout_im <span class="token operator">=</span> <span class="token string">&#39;flag_enc.bmp&#39;</span>\n\nim <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>out_im<span class="token punctuation">)</span>\nsize <span class="token operator">=</span> im<span class="token punctuation">.</span>size\npic  <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>im<span class="token punctuation">)</span> \nim<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> p0 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> c0 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">205</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        pic<span class="token punctuation">,</span> size <span class="token operator">=</span> decryptImage<span class="token punctuation">(</span>pic<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token punctuation">(</span>p0<span class="token punctuation">,</span> c0<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        path <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;result/</span><span class="token interpolation"><span class="token punctuation">{</span>p0<span class="token punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">{</span>c0<span class="token punctuation">}</span></span><span class="token string">.bmp&#39;</span></span>\n        outputImage<span class="token punctuation">(</span>path<span class="token punctuation">,</span> pic<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token comment"># outputImage方法是现成的</span>\n        \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><p>得到flag</p><p><img src="2021dfjk-writeup.assets/image-20210801001023777.png" alt="爆破结果"></p>',12),j=(0,p.Uk)("顺便提一嘴看了其他师傅的wp里有写看B站视频了解logistic map相关知识的，然后找了"),C={href:"https://www.bilibili.com/video/BV187411x7aQ",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("一个视频"),O=(0,p.Uk)("看，真的非常神奇。"),M={render:function(n,s){const a=(0,p.up)("RouterLink"),M=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("nav",t,[(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#misc"},{default:(0,p.w5)((()=>[e])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#re"},{default:(0,p.w5)((()=>[o])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#crypto"},{default:(0,p.w5)((()=>[c])),_:1})])])]),l,(0,p._)("p",null,[u,(0,p._)("a",r,[i,(0,p.Wm)(M)]),k,b,m]),d,(0,p._)("p",null,[g,S,D,y,f,w,h,x,_,(0,p._)("a",W,[A,(0,p.Wm)(M)]),v,z,L,U,I]),F,(0,p._)("p",null,[j,(0,p._)("a",C,[E,(0,p.Wm)(M)]),O])],64)}}}}]);